package leetcode.medium;

import java.util.*;

//[[3,3,1,1],[2,2,1,2],[1,1,1,2]]
//[[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]
//[[1]]
//[[10,2],[7,9]]
//[[37,98,82,45,42]]
//[[58],[99],[1],[6],[73],[9],[60],[88],[64],[60],[39],[29],[46],[20],[78],[95],[2],[35],[20],[53],[60],[15],[94],[78],[26],[89],[87],[93],[70],[31],[94],[58],[90],[48],[60],[6],[68],[62],[32],[36],[73],[49],[45],[31],[23],[3],[73],[70],[71],[18],[14],[49],[84],[72],[59],[91],[17],[46],[93],[31],[31],[71],[52],[83],[8],[95],[49],[57],[52],[65],[83],[98],[46],[55],[44],[100],[45],[7],[59],[38],[82],[62],[25],[55],[64],[56],[89],[2],[10],[57],[26],[19],[27],[80],[12],[32],[62],[91],[68],[92]]
public class L1329SortMatrixDiagonally {

    public int[][] diagonalSort(int[][] mat) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();

        int m = mat.length;//3
        int n = mat[0].length;//4

        for( int k = m-1; k >= 0; k-- ){//0
            int i = k;//0
            for( int j = 0; i < m && j < n; j++ ){//m-k --> 3
                pq.add(mat[i++][j]);//(0,0), (1,1), (2,2)
            }

            i = k;
            for( int j = 0; i < m && j < n; j++ ){
                mat[i++][j] = pq.poll();
            }
        }

        for( int k = 0; k < n; k++ ){
            int i = 0;
            for( int j = k+1; i < m && j < n; j++ ){
                pq.add(mat[i++][j]);
            }

            i = 0;
            for( int j = k+1; i < m && j < n; j++ ){
                mat[i++][j] = pq.poll();
            }
        }

        return mat;
    }

}
