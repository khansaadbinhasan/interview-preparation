You have been asked to build a secure and scalable RESTful API that allows users to create, read, update, and delete notes.
The application should also allow users to share their notes with other users and search for notes based on keywords.

Technical Requirements
1. Implement a RESTful API using a framework of your choice - SPRING
2. Use a DB of choice - MySQL
3. Use any authentication protocol and implement a simple rate limiting and request throttling to handle high traffic.
4. Implement Search Functionality to enable users to search for notes based on keywords ( preferably text indexing for high performance )
5. Write unit tests and integration tests your API endpoints using a testing framework of your choice.

API Endpoints
your API should implement the following endpoints:
Authentication Endpoints
1. POST /api/auth/signup create a new user account
2. POST /api/auth/login log in to an existing user account and receive an access token

Note Endpoints
1. GET /api/notes get a list of all notes for the authenticated user
2. GET /api/notes/{id} get a note by ID for the authenticated user
3. POST /api/notes create a new note for the authenticated user
4. PUT /api/notes/{id} update an existing note by Id for the authenticated user
5. DELETE /api/notes/{id} delete a note by Id for the authenticated user
6. GET /api/search?q={query} search for notes based on keywords for the authenticated user

Deliverables
1. A github repository with your code
2. A Readme file with details explaining the choice of framework DB any 3rd party tools
3. Instructions on how to run code and tests
4. Any necessary setup files or scripts to run code locally or in a test environment

Evaluation Criteria
1. Correctness - Does the code meet the requirements and work as expected
2. Performance - Does the code use rate limiting and request throttling to handle high traffic
3. Security - Does the code implement secure authentication and authorization mechanisms
4. Quality - Is the code well organized, maintainable and easy to understand
5. Completeness - Does the code include unit, integration, and end-to-end tests for all endpoints
6. Search - Does the code implement text indexing and search functionality to enable users to search for notes based on keywords